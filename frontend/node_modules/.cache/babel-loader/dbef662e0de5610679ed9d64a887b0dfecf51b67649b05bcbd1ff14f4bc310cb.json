{"ast":null,"code":"/**\n * Validation utilities for the Prompt Library application\n */\n\n// Content validation rules\nexport const VALIDATION_RULES = {\n  title: {\n    minLength: 3,\n    maxLength: 200,\n    pattern: /^[a-zA-Z0-9\\s\\-_.,!?()[\\]{}'\"`]+$/,\n    required: true\n  },\n  description: {\n    maxLength: 1000,\n    required: false\n  },\n  content: {\n    minLength: 10,\n    maxLength: 10000,\n    required: true\n  },\n  category: {\n    required: true\n  },\n  tags: {\n    maxItems: 10,\n    maxLength: 50,\n    pattern: /^[a-zA-Z0-9\\-_]+$/,\n    required: false\n  }\n};\n\n/**\n * Validate a single field against its rules\n */\nexport const validateField = (fieldName, value, rules = VALIDATION_RULES[fieldName]) => {\n  if (!rules) return {\n    isValid: true,\n    error: null\n  };\n  const errors = [];\n\n  // Required validation\n  if (rules.required && (!value || value.toString().trim() === '')) {\n    errors.push(`${fieldName} is required`);\n  }\n\n  // Skip other validations if field is empty and not required\n  if (!value || value.toString().trim() === '') {\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  // Min length validation\n  if (rules.minLength && value.toString().length < rules.minLength) {\n    errors.push(`${fieldName} must be at least ${rules.minLength} characters long`);\n  }\n\n  // Max length validation\n  if (rules.maxLength && value.toString().length > rules.maxLength) {\n    errors.push(`${fieldName} must not exceed ${rules.maxLength} characters`);\n  }\n\n  // Pattern validation\n  if (rules.pattern && !rules.pattern.test(value.toString())) {\n    errors.push(`${fieldName} contains invalid characters`);\n  }\n\n  // Array-specific validations\n  if (Array.isArray(value)) {\n    if (rules.maxItems && value.length > rules.maxItems) {\n      errors.push(`${fieldName} can have at most ${rules.maxItems} items`);\n    }\n    if (rules.maxLength && value.some(item => item.length > rules.maxLength)) {\n      errors.push(`Each ${fieldName} item must not exceed ${rules.maxLength} characters`);\n    }\n    if (rules.pattern && value.some(item => !rules.pattern.test(item))) {\n      errors.push(`Each ${fieldName} item contains invalid characters`);\n    }\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n/**\n * Validate an entire form\n */\nexport const validateForm = formData => {\n  const validationResults = {};\n  let isFormValid = true;\n  Object.keys(VALIDATION_RULES).forEach(fieldName => {\n    const fieldValue = formData[fieldName];\n    const result = validateField(fieldName, fieldValue);\n    validationResults[fieldName] = result;\n    if (!result.isValid) {\n      isFormValid = false;\n    }\n  });\n  return {\n    isValid: isFormValid,\n    fieldErrors: validationResults\n  };\n};\n\n/**\n * Sanitize content for security\n */\nexport const sanitizeContent = content => {\n  if (!content) return '';\n  return content.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '') // Remove script tags\n  .replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '') // Remove iframe tags\n  .replace(/javascript:/gi, '') // Remove javascript: protocols\n  .replace(/on\\w+\\s*=/gi, '') // Remove event handlers\n  .trim();\n};\n\n/**\n * Check if content contains potentially harmful patterns\n */\nexport const checkContentSafety = content => {\n  const dangerousPatterns = [/<script/i, /javascript:/i, /vbscript:/i, /onload=/i, /onerror=/i, /onclick=/i, /onmouseover=/i, /eval\\(/i, /document\\.cookie/i, /window\\.location/i, /alert\\(/i, /confirm\\(/i, /prompt\\(/i];\n  return dangerousPatterns.every(pattern => !pattern.test(content));\n};\n\n/**\n * Validate prompt-specific rules\n */\nexport const validatePrompt = promptData => {\n  const baseValidation = validateForm(promptData);\n  const additionalErrors = {};\n\n  // Check for prompt injection patterns\n  const injectionPatterns = [/system prompt/i, /ignore previous/i, /override/i, /bypass/i, /admin mode/i];\n  if (injectionPatterns.some(pattern => pattern.test(promptData.content || ''))) {\n    additionalErrors.content = {\n      isValid: false,\n      errors: ['Content contains potentially unsafe patterns']\n    };\n  }\n\n  // Check for excessive repetition\n  const words = (promptData.content || '').split(/\\s+/);\n  const wordCount = words.length;\n  const uniqueWords = new Set(words.map(w => w.toLowerCase()));\n  const repetitionRatio = wordCount > 0 ? (wordCount - uniqueWords.size) / wordCount : 0;\n  if (repetitionRatio > 0.8) {\n    additionalErrors.content = {\n      isValid: false,\n      errors: ['Content appears to contain excessive repetition']\n    };\n  }\n  return {\n    isValid: baseValidation.isValid && Object.keys(additionalErrors).length === 0,\n    fieldErrors: {\n      ...baseValidation.fieldErrors,\n      ...additionalErrors\n    }\n  };\n};","map":{"version":3,"names":["VALIDATION_RULES","title","minLength","maxLength","pattern","required","description","content","category","tags","maxItems","validateField","fieldName","value","rules","isValid","error","errors","toString","trim","push","length","test","Array","isArray","some","item","validateForm","formData","validationResults","isFormValid","Object","keys","forEach","fieldValue","result","fieldErrors","sanitizeContent","replace","checkContentSafety","dangerousPatterns","every","validatePrompt","promptData","baseValidation","additionalErrors","injectionPatterns","words","split","wordCount","uniqueWords","Set","map","w","toLowerCase","repetitionRatio","size"],"sources":["C:/codes6/prompt_library_v2/prompt_library_v2/frontend/src/utils/validation.js"],"sourcesContent":["/**\n * Validation utilities for the Prompt Library application\n */\n\n// Content validation rules\nexport const VALIDATION_RULES = {\n  title: {\n    minLength: 3,\n    maxLength: 200,\n    pattern: /^[a-zA-Z0-9\\s\\-_.,!?()[\\]{}'\"`]+$/,\n    required: true\n  },\n  description: {\n    maxLength: 1000,\n    required: false\n  },\n  content: {\n    minLength: 10,\n    maxLength: 10000,\n    required: true\n  },\n  category: {\n    required: true\n  },\n  tags: {\n    maxItems: 10,\n    maxLength: 50,\n    pattern: /^[a-zA-Z0-9\\-_]+$/,\n    required: false\n  }\n};\n\n/**\n * Validate a single field against its rules\n */\nexport const validateField = (fieldName, value, rules = VALIDATION_RULES[fieldName]) => {\n  if (!rules) return { isValid: true, error: null };\n\n  const errors = [];\n\n  // Required validation\n  if (rules.required && (!value || value.toString().trim() === '')) {\n    errors.push(`${fieldName} is required`);\n  }\n\n  // Skip other validations if field is empty and not required\n  if (!value || value.toString().trim() === '') {\n    return { isValid: errors.length === 0, errors };\n  }\n\n  // Min length validation\n  if (rules.minLength && value.toString().length < rules.minLength) {\n    errors.push(`${fieldName} must be at least ${rules.minLength} characters long`);\n  }\n\n  // Max length validation\n  if (rules.maxLength && value.toString().length > rules.maxLength) {\n    errors.push(`${fieldName} must not exceed ${rules.maxLength} characters`);\n  }\n\n  // Pattern validation\n  if (rules.pattern && !rules.pattern.test(value.toString())) {\n    errors.push(`${fieldName} contains invalid characters`);\n  }\n\n  // Array-specific validations\n  if (Array.isArray(value)) {\n    if (rules.maxItems && value.length > rules.maxItems) {\n      errors.push(`${fieldName} can have at most ${rules.maxItems} items`);\n    }\n\n    if (rules.maxLength && value.some(item => item.length > rules.maxLength)) {\n      errors.push(`Each ${fieldName} item must not exceed ${rules.maxLength} characters`);\n    }\n\n    if (rules.pattern && value.some(item => !rules.pattern.test(item))) {\n      errors.push(`Each ${fieldName} item contains invalid characters`);\n    }\n  }\n\n  return { isValid: errors.length === 0, errors };\n};\n\n/**\n * Validate an entire form\n */\nexport const validateForm = (formData) => {\n  const validationResults = {};\n  let isFormValid = true;\n\n  Object.keys(VALIDATION_RULES).forEach(fieldName => {\n    const fieldValue = formData[fieldName];\n    const result = validateField(fieldName, fieldValue);\n    validationResults[fieldName] = result;\n\n    if (!result.isValid) {\n      isFormValid = false;\n    }\n  });\n\n  return { isValid: isFormValid, fieldErrors: validationResults };\n};\n\n/**\n * Sanitize content for security\n */\nexport const sanitizeContent = (content) => {\n  if (!content) return '';\n\n  return content\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '') // Remove script tags\n    .replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '') // Remove iframe tags\n    .replace(/javascript:/gi, '') // Remove javascript: protocols\n    .replace(/on\\w+\\s*=/gi, '') // Remove event handlers\n    .trim();\n};\n\n/**\n * Check if content contains potentially harmful patterns\n */\nexport const checkContentSafety = (content) => {\n  const dangerousPatterns = [\n    /<script/i,\n    /javascript:/i,\n    /vbscript:/i,\n    /onload=/i,\n    /onerror=/i,\n    /onclick=/i,\n    /onmouseover=/i,\n    /eval\\(/i,\n    /document\\.cookie/i,\n    /window\\.location/i,\n    /alert\\(/i,\n    /confirm\\(/i,\n    /prompt\\(/i\n  ];\n\n  return dangerousPatterns.every(pattern => !pattern.test(content));\n};\n\n/**\n * Validate prompt-specific rules\n */\nexport const validatePrompt = (promptData) => {\n  const baseValidation = validateForm(promptData);\n  const additionalErrors = {};\n\n  // Check for prompt injection patterns\n  const injectionPatterns = [\n    /system prompt/i,\n    /ignore previous/i,\n    /override/i,\n    /bypass/i,\n    /admin mode/i\n  ];\n\n  if (injectionPatterns.some(pattern => pattern.test(promptData.content || ''))) {\n    additionalErrors.content = {\n      isValid: false,\n      errors: ['Content contains potentially unsafe patterns']\n    };\n  }\n\n  // Check for excessive repetition\n  const words = (promptData.content || '').split(/\\s+/);\n  const wordCount = words.length;\n  const uniqueWords = new Set(words.map(w => w.toLowerCase()));\n  const repetitionRatio = wordCount > 0 ? (wordCount - uniqueWords.size) / wordCount : 0;\n\n  if (repetitionRatio > 0.8) {\n    additionalErrors.content = {\n      isValid: false,\n      errors: ['Content appears to contain excessive repetition']\n    };\n  }\n\n  return {\n    isValid: baseValidation.isValid && Object.keys(additionalErrors).length === 0,\n    fieldErrors: { ...baseValidation.fieldErrors, ...additionalErrors }\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}